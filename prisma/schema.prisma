generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String              @id @default(cuid())
  email                               String              @unique
  username                            String?             @unique
  firstName                           String?
  lastName                            String?
  avatar                              String?
  phone                               String?
  password                            String
  emailVerified                       DateTime?
  emailVerificationToken              String?
  emailVerificationExpires            DateTime?
  isActive                            Boolean             @default(true)
  bio                                 String?
  address                             String?
  city                                String?
  country                             String?
  timezone                            String?
  createdAt                           DateTime            @default(now())
  updatedAt                           DateTime            @updatedAt
  lastLoginAt                         DateTime?
  businessDeveloperApprovisionnements Approvisionnement[] @relation("BusinessDeveloperApprovisionnements")
  stockManagerApprovisionnements      Approvisionnement[] @relation("StockManagerApprovisionnements")
  supplierApprovisionnements          Approvisionnement[] @relation("SupplierApprovisionnements")
  driverDeliveries                    Delivery[]          @relation("DriverDeliveries")
  notifications                       Notification[]
  clientOrders                        Order[]             @relation("ClientOrders")
  posts                               Post[]
  sessions                            Session[]
  userRoles                           UserRole[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id              String         @id @default(cuid())
  title           String
  content         String?
  excerpt         String?
  slug            String         @unique
  published       Boolean        @default(false)
  featured        Boolean        @default(false)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  authorId        String
  categories      PostCategory[]
  tags            PostTag[]
  author          User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Category {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?
  color       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       PostCategory[]

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]

  @@map("tags")
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model EmailLog {
  id         String      @id @default(cuid())
  to         String
  from       String
  subject    String
  templateId String?
  status     EmailStatus @default(PENDING)
  error      String?
  sentAt     DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("email_logs")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  type        RoleType         @unique
  description String?
  color       String?
  isActive    Boolean          @default(true)
  isDefault   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  resource        String
  action          String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  isGranted    Boolean    @default(true)
  conditions   Json?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique @db.VarChar(50)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("product_categories")
}

model Product {
  id                 String              @id @default(cuid())
  categoryId         String?
  name               String              @db.VarChar(100)
  description        String?
  unit               String              @db.VarChar(20)
  imageUrl           String?             @db.VarChar(255)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  approvisionnements Approvisionnement[]
  orderItems         OrderItem[]
  category           ProductCategory?    @relation(fields: [categoryId], references: [id])
  stocks             Stock[]

  @@map("products")
}

model Warehouse {
  id                 String              @id @default(cuid())
  name               String              @db.VarChar(100)
  address            String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  approvisionnements Approvisionnement[]
  orders             Order[]
  stocks             Stock[]

  @@map("warehouses")
}

model Approvisionnement {
  id                  String                  @id @default(cuid())
  supplierId          String
  productId           String
  warehouseId         String
  quantity            Decimal                 @db.Decimal(10, 2)
  proposedPrice       Decimal                 @db.Decimal(10, 2)
  deliveryDate        DateTime                @db.Date
  status              ApprovisionnementStatus @default(PENDING)
  businessDeveloperId String?
  stockManagerId      String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  businessDeveloper   User?                   @relation("BusinessDeveloperApprovisionnements", fields: [businessDeveloperId], references: [id])
  product             Product                 @relation(fields: [productId], references: [id])
  stockManager        User?                   @relation("StockManagerApprovisionnements", fields: [stockManagerId], references: [id])
  supplier            User                    @relation("SupplierApprovisionnements", fields: [supplierId], references: [id])
  warehouse           Warehouse               @relation(fields: [warehouseId], references: [id])
  payments            Payment[]
  stocks              Stock[]

  @@map("approvisionnements")
}

model Stock {
  id                  String             @id @default(cuid())
  productId           String
  warehouseId         String
  quantity            Decimal            @db.Decimal(10, 2)
  unitPrice           Decimal            @db.Decimal(10, 2)
  approvisionnementId String?
  lastUpdated         DateTime           @default(now()) @updatedAt
  approvisionnement   Approvisionnement? @relation(fields: [approvisionnementId], references: [id])
  product             Product            @relation(fields: [productId], references: [id])
  warehouse           Warehouse          @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@map("stocks")
}

model Order {
  id              String         @id @default(cuid())
  clientId        String
  warehouseId     String
  orderDate       DateTime       @default(now())
  totalAmount     Decimal        @db.Decimal(10, 2)
  status          OrderStatus    @default(PENDING)
  deliveryOption  Boolean        @default(false)
  deliveryAddress String?
  paymentMethod   PaymentMethod
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  delivery        Delivery?
  notifications   Notification[]
  orderItems      OrderItem[]
  client          User           @relation("ClientOrders", fields: [clientId], references: [id])
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [id])
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Decimal @db.Decimal(10, 2)
  unitPrice Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Delivery {
  id             String         @id @default(cuid())
  orderId        String         @unique
  driverId       String?
  status         DeliveryStatus @default(ASSIGNED)
  gpsCoordinates String?
  eta            DateTime?
  deliveryDate   DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  driver         User?          @relation("DriverDeliveries", fields: [driverId], references: [id])
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  notifications  Notification[]

  @@map("deliveries")
}

model Payment {
  id                  String             @id @default(cuid())
  orderId             String?
  approvisionnementId String?
  amount              Decimal            @db.Decimal(10, 2)
  paymentMethod       PaymentMethod
  status              PaymentStatus      @default(PENDING)
  transactionId       String?            @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  approvisionnement   Approvisionnement? @relation(fields: [approvisionnementId], references: [id])
  order               Order?             @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  title      String           @db.VarChar(200)
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  orderId    String?
  deliveryId String?
  createdAt  DateTime         @default(now())
  delivery   Delivery?        @relation(fields: [deliveryId], references: [id])
  order      Order?           @relation(fields: [orderId], references: [id])
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum RoleType {
  ADMIN
  BUSINESS
  SUPPLIER
  STOCK_MANAGER
  CLIENT
  COMMAND_MANAGER
  DELIVERY_DRIVER
}

enum ApprovisionnementStatus {
  PENDING
  APPROVED
  RECEIVED
  REJECTED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  RETURNED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  CRYPTO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  ORDER_UPDATE
  DELIVERY_UPDATE
  PAYMENT_UPDATE
  SYSTEM_ALERT
  PROMOTION
}
